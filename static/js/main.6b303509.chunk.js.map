{"version":3,"sources":["componentes/Upload.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Upload","props","handleChange","event","convert","JSON","parse","target","value","error","console","log","state","json","prettify","csv","download","bind","require","json2csv","err","setState","this","blob","Blob","type","url","URL","createObjectURL","a","document","createElement","href","Date","toString","click","length","split","slice","LIMIT","join","FormControl","TextareaAutosize","minRows","maxRows","id","placeholder","onChange","FormHelperText","Button","color","variant","onClick","className","data","csvDelimiter","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"oTAkBqBA,E,kDACnB,WAAYC,GAAe,IAAD,8BACxB,cAAMA,IAWRC,aAAe,SAACC,GACd,IACE,EAAKC,QAAQC,KAAKC,MAAMH,EAAMI,OAAOC,QACrC,MAAOC,GACPC,QAAQC,IAAI,cAbd,EAAKC,MAAQ,CACXC,KAAM,GACNC,SAAU,GACVC,IAAK,IAGP,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBATQ,E,2CAoB1B,SAAQJ,GAAY,IAAD,OACCK,EAAQ,IAShBC,SAASN,GAPM,SAACO,EAAUL,GAC9BK,EAAKV,QAAQC,IAAI,YAEnB,EAAKU,SAAS,CAAER,OAAME,a,sBAO5B,WACE,IAAQA,EAAQO,KAAKV,MAAbG,IAEFQ,EAAO,IAAIC,KAAK,CAACT,GAAM,CAC3BU,KAAM,4BAEFC,EAAMC,IAAIC,gBAAgBL,GAC1BM,EAAIC,SAASC,cAAc,KACjCF,EAAEG,KAAON,EACTG,EAAEb,SAAF,WAAgB,IAAIiB,MAAOC,WAA3B,QACAL,EAAEM,U,oBAGJ,WACE,IAAMpB,EAAQO,KAAKV,MAAbG,IAUN,OAPIA,EAAIqB,OArDE,MAsDRrB,EAAMA,EACHsB,MAAM,MACNC,MAAM,EAAGC,KACTC,KAAK,OAIR,qCACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CACEC,QAAS,GACTC,QAAS,GACT,aAAW,iBACXC,GAAG,QACHC,YAAY,GACZC,SAAUzB,KAAKpB,eAEjB,cAAC8C,EAAA,EAAD,CAAgBH,GAAG,iBAAnB,yDAIF,cAACI,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAQ,YAAYC,QAAS9B,KAAKN,SAA1D,sBAGA,qBAAKqC,UAAU,MAAf,SACE,cAAC,iBAAD,CAAgBC,KAAMvC,EAAKwC,aAAa,e,GA7EdC,aCZfC,E,kDACnB,WAAYxD,GAAe,IAAD,8BACxB,cAAMA,IAEDW,MAAQ,GAHW,E,0CAM1B,WACE,OACE,mCACE,cAAC,EAAD,U,GAVyB4C,aCQlBE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFvC,SAASwC,eAAe,SAM1BZ,M","file":"static/js/main.6b303509.chunk.js","sourcesContent":["import {\n  Button,\n  FormControl,\n  FormHelperText,\n  TextareaAutosize,\n} from \"@material-ui/core\";\nimport React, { Component } from \"react\";\nimport { CsvToHtmlTable } from \"react-csv-to-table\";\n\ninterface Props {}\ninterface State {\n  json: Object;\n  prettify: any;\n  csv: any;\n}\n\nconst LIMIT = 500;\n\nexport default class Upload extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      json: {},\n      prettify: \"\",\n      csv: \"\",\n    };\n\n    this.download = this.download.bind(this);\n  }\n\n  handleChange = (event: any) => {\n    try {\n      this.convert(JSON.parse(event.target.value));\n    } catch (error) {\n      console.log(\"an error\");\n    }\n  };\n\n  convert(json: any) {\n    const converter = require(\"json-2-csv\");\n\n    const callbackFunction = (err: any, csv: any) => {\n      if (err) console.log(\"An Error\");\n      else {\n        this.setState({ json, csv });\n      }\n    };\n\n    converter.json2csv(json, callbackFunction);\n  }\n\n  download(): void {\n    const { csv } = this.state;\n    //download the csv\n    const blob = new Blob([csv], {\n      type: \"text/csv;charset=utf-8;\",\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = `${new Date().toString()}.csv`;\n    a.click();\n  }\n\n  render(): JSX.Element {\n    let { csv } = this.state;\n\n    //if limit is exceeded, get the first 500 lines\n    if (csv.length > LIMIT) {\n      csv = csv\n        .split(\"\\n\")\n        .slice(0, LIMIT + 1)\n        .join(\"\\n\");\n    }\n\n    return (\n      <>\n        <FormControl>\n          <TextareaAutosize\n            minRows={10}\n            maxRows={15}\n            aria-label=\"empty textarea\"\n            id=\"paste\"\n            placeholder=\"\"\n            onChange={this.handleChange}\n          />\n          <FormHelperText id=\"my-helper-text\">\n            Enter an array of objects in JSON format\n          </FormHelperText>\n        </FormControl>\n        <Button color=\"primary\" variant=\"contained\" onClick={this.download}>\n          Download\n        </Button>\n        <div className=\"csv\">\n          <CsvToHtmlTable data={csv} csvDelimiter=\",\" />\n        </div>\n      </>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Upload from \"./componentes/Upload\";\n\ninterface Props {}\n\nexport default class App extends Component<Props> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {};\n  }\n\n  render(): JSX.Element {\n    return (\n      <>\n        <Upload />\n      </>\n    );\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
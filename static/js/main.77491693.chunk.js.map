{"version":3,"sources":["componentes/Upload.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Upload","props","handleChange","event","target","value","trim","convert","JSON","parse","setState","error","state","json","prettify","csv","excludes","headers","download","bind","converter","require","this","options","checkSchemaDifferences","emptyFieldValue","delimiter","wrap","field","eol","excelBOM","excludeKeys","json2csv","err","console","log","split","blob","Blob","type","url","URL","createObjectURL","a","document","createElement","href","Date","toString","click","length","slice","LIMIT","join","FormControl","TextareaAutosize","minRows","maxRows","id","placeholder","onChange","FormHelperText","Button","color","variant","onClick","className","map","header","e","includes","splice","indexOf","push","htmlFor","data","csvDelimiter","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.77491693.chunk.js","sourcesContent":["import {\n  Button,\n  FormControl,\n  FormHelperText,\n  TextareaAutosize,\n} from \"@material-ui/core\";\nimport React, { Component } from \"react\";\nimport { CsvToHtmlTable } from \"react-csv-to-table\";\n\ninterface Props {}\ninterface State {\n  json: Object;\n  prettify: any;\n  csv: any;\n  excludes: string[];\n  headers: string[];\n  error: string;\n}\n\nconst LIMIT = 500;\n\nexport default class Upload extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      json: {},\n      prettify: \"\",\n      csv: \"\",\n      excludes: [],\n      headers: [],\n      error: \"\",\n    };\n\n    this.download = this.download.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange = (event: any) => {\n    try {\n      // check event.target.value is not empty or spaces\n      if (event.target.value.trim() !== \"\")\n        this.convert(JSON.parse(event.target.value));\n      this.setState({ error: \"\" });\n    } catch (error) {\n      this.setState({ error: \"Invalid JSON input\" });\n    }\n  };\n\n  convert(json: any) {\n    const converter = require(\"json-2-csv\");\n    const { excludes } = this.state;\n\n    const callbackFunction = (err: any, csv: any) => {\n      if (err) console.log(\"An Error\");\n      else {\n        const headers = csv.split(\"\\n\")[0].split(\",\");\n        this.setState({ json, csv, headers });\n      }\n    };\n\n    const options = {\n      checkSchemaDifferences: false,\n      emptyFieldValue: \"\",\n      delimiter: {\n        wrap: \"\\n\",\n        field: \",\",\n        eol: \"\\n\",\n      },\n      excelBOM: true,\n      excludeKeys: [...excludes],\n    };\n\n    converter.json2csv(json, callbackFunction, options);\n  }\n\n  download(): void {\n    const { csv } = this.state;\n    //download the csv\n    const blob = new Blob([csv], {\n      type: \"text/csv;charset=utf-8;\",\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = `${new Date().toString()}.csv`;\n    a.click();\n  }\n\n  render(): JSX.Element {\n    let { csv, headers, error } = this.state;\n    //if limit is exceeded, get the first 500 lines\n    if (csv.length > LIMIT) {\n      csv = csv\n        .split(\"\\n\")\n        .slice(0, LIMIT + 1)\n        .join(\"\\n\");\n    }\n\n    return (\n      <>\n        <FormControl>\n          <TextareaAutosize\n            minRows={10}\n            maxRows={15}\n            aria-label=\"empty textarea\"\n            id=\"paste\"\n            placeholder=\"\"\n            onChange={this.handleChange}\n          />\n          <FormHelperText id=\"my-helper-text\">\n            Enter an array of objects in JSON format\n          </FormHelperText>\n        </FormControl>\n        {error || !csv ? (\n          <span>{error}</span>\n        ) : (\n          <>\n            <Button color=\"primary\" variant=\"contained\" onClick={this.download}>\n              Download\n            </Button>\n            <div className=\"headers\">\n              {headers.map((header: string) => (\n                <span key={header}>\n                  <input\n                    id={header}\n                    type=\"checkbox\"\n                    value={header}\n                    onChange={(e) => {\n                      const { excludes } = this.state;\n                      const { value } = e.target;\n                      if (excludes.includes(value)) {\n                        excludes.splice(excludes.indexOf(value), 1);\n                      } else {\n                        excludes.push(value);\n                      }\n                      this.setState({ excludes });\n                    }}\n                  />\n                  <label htmlFor={header}>{header}</label>\n                </span>\n              ))}\n            </div>\n          </>\n        )}\n        <div className=\"csv\">\n          <CsvToHtmlTable data={csv} csvDelimiter=\",\" />\n        </div>\n      </>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Upload from \"./componentes/Upload\";\n\ninterface Props {}\n\nexport default class App extends Component<Props> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {};\n  }\n\n  render(): JSX.Element {\n    return (\n      <>\n        <Upload />\n      </>\n    );\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}